#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('book-code:server');
const http = require('http');
const { isObject } = require('util');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const io = require('socket.io')(server);
io.on('connection', function(socket) {
    console.log("User connected");

    socket.on('disconnect', function(socket) {
        console.log("user disconnected")
    })

    //join room
    socket.on('join', function(data) {

        //display the number of users in room 
        users += 1
        console.log(users)
        io.sockets.emit('usercount', { count: users + ' person joined ' });
        //end

        // user joining the particular room
        socket.join(data.room)

        console.log(data.user + 'joined the room:' + data.room)

        //inform other on the room about event
        socket.broadcast.to(data.room).emit('new user joined', { user: data.user, message: "has joined this room " });


    });
    //leave room

    socket.on('leave', function(data) {
        //number of users in room
        users--
        io.sockets.emit('usercount', { count: '' + users })
        console.log(users)
            //end

        console.log(data.user + "has left the room " + data.room)
        socket.broadcast.to(data.room).emit('left room', { user: data.user, message: "has left the room " });
        socket.leave(data.room)

    })

    //sending message
    socket.on('message', function(data) {
        io.in(data.room).emit('new message', { user: data.user, message: data.message })
    })
})

server.listen(port, () => {
    console.log(`started on port: ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);