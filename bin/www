#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('book-code:server');
const http = require('http');
const { isObject } = require('util');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const io = require('socket.io')(server);

const participants = new Map();
let startQuizTimer;

const workspaces = io.of(/^\/session\/[a-zA-Z0-9]+$/)
    .on('connection', (socket) => {
        const workspace = socket.nsp;
        console.log(`user connected to ${workspace.name}`);
        console.log('number of connected clients: ' + Object.keys(workspace.sockets).length)
        socket.on('answer', (data) => {
            console.log(data);
            //todo handle answer?
        });

        socket.on('addParticipant', (data) => {
            console.log(data);

            if (!participants.has(workspace.name)) {
                participants.set(workspace.name, []);
            }
            console.log("parts" + participants.get(workspace.name));
            socket.emit('oldParticipants', participants.get(workspace.name));
            participants.get(workspace.name).push(data)
            workspace.emit('participantAdded', data);
            clearTimeout(startQuizTimer);
        });


        socket.on('msg', (data) => {
            console.log(data);
            //todo handle msg?
            workspace.emit('msg', data);
        });


        socket.on('toggleReady', (hash) => {
            const participant = participants.get(workspace.name)
                .find(participant => participant.hash === hash);
            participant.isReady = !participant.isReady;
            workspace.emit('toggleReady', hash);
            clearTimeout(startQuizTimer);
            startQuizIfAllready(workspace);
        });


        workspace.emit('msg', `hello ${workspace.name}`);
    });

const startQuizIfAllready = (workspace) => {
    if (areAllReady(participants.get(workspace.name))) {
        workspace.emit('startQuizAnimation'); //todo
        startQuizTimer = setTimeout(() => {
            workspace.emit('startQuiz');
        }, 5000);
    };
}

const areAllReady = (workspace_participants) => {
    return workspace_participants
        .every(participant => participant.isReady);
}

server.listen(port, () => {
    console.log(`started on port: ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);